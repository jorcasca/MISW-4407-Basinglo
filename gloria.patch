diff --git a/assets/cfg/bullet.json b/assets/cfg/bullet.json
index 864324e..9137e0a 100755
--- a/assets/cfg/bullet.json
+++ b/assets/cfg/bullet.json
@@ -22,6 +22,6 @@
             "g": 255,
             "b": 255
         },
-        "velocity": 100
+        "velocity": 80
     }
 }
\ No newline at end of file
diff --git a/assets/cfg/enemies.json b/assets/cfg/enemies.json
index bd96501..a2f243c 100755
--- a/assets/cfg/enemies.json
+++ b/assets/cfg/enemies.json
@@ -2,7 +2,7 @@
     "Enemy01": {
         "image": "assets/img/invaders_enemy_01.png",
         "sound": "assets/snd/enemy_launch.ogg",
-        "velocity": 75,
+        "velocity": 50,
         "animations": {
             "number_frames": 5,
             "list": [
@@ -24,7 +24,7 @@
     "Enemy02": {
         "image": "assets/img/invaders_enemy_02.png",
         "sound": "assets/snd/enemy_launch.ogg",
-        "velocity": 75,
+        "velocity": 50,
         "animations": {
             "number_frames": 5,
             "list": [
@@ -46,7 +46,7 @@
     "Enemy03": {
         "image": "assets/img/invaders_enemy_03.png",
         "sound": "assets/snd/enemy_launch.ogg",
-        "velocity": 75,
+        "velocity": 50,
         "animations": {
             "number_frames": 5,
             "list": [
@@ -68,7 +68,7 @@
     "Enemy04": {
         "image": "assets/img/invaders_enemy_04.png",
         "sound": "assets/snd/enemy_launch.ogg",
-        "velocity": 75,
+        "velocity": 50,
         "animations": {
             "number_frames": 1,
             "list": [
diff --git a/assets/cfg/interface.json b/assets/cfg/interface.json
index a59df39..93c8c1f 100755
--- a/assets/cfg/interface.json
+++ b/assets/cfg/interface.json
@@ -32,8 +32,8 @@
         "font": "assets/fnt/PressStart2P.ttf",
         "font_size": 8,
         "color": {
-            "r": 30,
-            "g": 144,
+            "r": 255,
+            "g": 255,
             "b": 255
         },
         "position": {
@@ -46,8 +46,8 @@
         "font": "assets/fnt/PressStart2P.ttf",
         "font_size": 8,
         "color": {
-            "r": 255,
-            "g": 255,
+            "r": 30,
+            "g": 144,
             "b": 255
         },
         "position": {
@@ -82,5 +82,56 @@
             "x": 160,
             "y": 15
         }
+    },
+    "start": {
+        "value": "PRESS Z TO START",
+        "font": "assets/fnt/PressStart2P.ttf",
+        "font_size": 8,
+        "color": {
+            "r": 255,
+            "g": 0,
+            "b": 0   
+        },
+        "position": {
+            "x": 65,
+            "y": 150
+        },
+        "blink_rate": 0.5
+    },
+    "logo_title_img": {
+        "image": "assets/img/invaders_logo_title.png",
+        "position": {
+            "x": 55,
+            "y": 50
+        }
+    },
+    "pause": {
+        "value": "PAUSED",
+        "font": "assets/fnt/PressStart2P.ttf",
+        "font_size": 8,
+        "color": {
+            "r": 255,
+            "g": 0,
+            "b": 0   
+        },
+        "position": {
+            "x": 110,
+            "y": 150
+        },
+        "blink_rate": 0.5
+    },
+    "level_complete": {
+        "value": "LEVEL COMPLETE",
+        "font": "assets/fnt/PressStart2P.ttf",
+        "font_size": 8,
+        "color": {
+            "r": 255,
+            "g": 0,
+            "b": 0   
+        },
+        "position": {
+            "x": 110,
+            "y": 150
+        }
     }
-}
\ No newline at end of file
+}
diff --git a/assets/cfg/level_01.json b/assets/cfg/level_01.json
index d199c23..e61d91b 100755
--- a/assets/cfg/level_01.json
+++ b/assets/cfg/level_01.json
@@ -1,4 +1,8 @@
 {
+    "settings": {
+        "level": 1, 
+        "sound": "assets/snd/game_start.ogg"
+    },
     "player_spawn": {
         "position": {
             "x": 128,
diff --git a/assets/cfg/starfield.json b/assets/cfg/starfield.json
index cec9176..b5e7e43 100755
--- a/assets/cfg/starfield.json
+++ b/assets/cfg/starfield.json
@@ -16,6 +16,11 @@
             "b": 225
         }
     ],
+    "star_size": {
+        "w": 1,
+        "h_min": 1,
+        "h_max": 2
+    },
     "number_of_stars": 25,
     "vertical_speed": {
         "min": 10,
diff --git a/main.py b/main.py
index 8955dfa..bb94951 100755
--- a/main.py
+++ b/main.py
@@ -6,4 +6,4 @@ from src.engine.game_engine import GameEngine
 
 if __name__ == "__main__":
     engine = GameEngine()
-    asyncio.run(engine.run())
+    asyncio.run(engine.run("MENU_SCENE"))
diff --git a/src/create/prefab_creator.py b/src/create/prefab_creator.py
index 9ab7248..1801d10 100755
--- a/src/create/prefab_creator.py
+++ b/src/create/prefab_creator.py
@@ -1,6 +1,7 @@
 
 import esper
 import pygame
+import random
 
 from src.ecs.components.c_surface import CSurface
 from src.ecs.components.c_transform import CTransform
@@ -9,6 +10,7 @@ from src.ecs.components.c_input_command import CInputCommand
 from src.ecs.components.c_enemy_spawner import CEnemySpawner
 from src.ecs.components.c_animation import CAnimation
 from src.ecs.components.c_enemy_state import CEnemyState
+from src.ecs.components.c_blink import CBlink
 
 from src.ecs.components.tags.c_tag_player import CTagPlayer
 from src.ecs.components.tags.c_tag_player_bullet import CTagPlayerBullet
@@ -16,6 +18,8 @@ from src.ecs.components.tags.c_tag_player_ammunition import CTagPlayerAmmunition
 from src.ecs.components.tags.c_tag_enemy import CTagEnemy
 from src.ecs.components.tags.c_tag_explosion import CTagExplosion
 from src.ecs.components.tags.c_tag_enemy_bullet import CTagEnemyBullet
+from src.ecs.components.tags.c_tag_star import CTagStar
+
 from src.engine.service_locator import ServiceLocator
 
 def create_square(ecs_world: esper.World, size:pygame.Vector2, pos:pygame.Vector2, vel: pygame.Vector2, col: pygame.Color) -> int:
@@ -86,9 +90,11 @@ def create_input_player(ecs_world: esper.World):
     input_left = ecs_world.create_entity()
     input_right = ecs_world.create_entity()
     input_key_space = ecs_world.create_entity()
+    pause_action = ecs_world.create_entity()
     ecs_world.add_component(input_left, CInputCommand("PLAYER_LEFT", pygame.K_LEFT))
     ecs_world.add_component(input_right, CInputCommand("PLAYER_RIGHT", pygame.K_RIGHT))
     ecs_world.add_component(input_key_space, CInputCommand("PLAYER_FIRE", pygame.K_SPACE))
+    ecs_world.add_component(pause_action, CInputCommand("PAUSE", pygame.K_p))
 
 def create_enemy_spawner(ecs_world: esper.World, enemy_spawn_events: dict):
     enemy_entity = ecs_world.create_entity()
@@ -118,7 +124,7 @@ def create_enemy_bullet_square(ecs_world: esper.World, bullet: dict, enemy_pos:
     ecs_world.add_component(bullet_entity, CTagEnemyBullet())
     return bullet_entity
 
-def draw_text(ecs_world: esper.World, text: str, font: str, font_size: int, color: dict, position: dict, tag = None):
+def draw_text(ecs_world: esper.World, text: str, font: str, font_size: int, color: dict, position: dict, tag = None) -> int:
         title_entity = ecs_world.create_entity()
         surface = CSurface.from_text(
             text=text,
@@ -129,3 +135,17 @@ def draw_text(ecs_world: esper.World, text: str, font: str, font_size: int, colo
         ecs_world.add_component(title_entity, CTransform(pygame.Vector2(position["x"], position["y"])))
         if tag != None:
             ecs_world.add_component(title_entity, tag)
+        return title_entity
+
+def create_starfield(ecs_world: esper.World, starfield: dict, screen):
+    for _ in range(starfield["number_of_stars"]):
+        vel = random.randint(starfield["vertical_speed"]["min"], starfield["vertical_speed"]["max"])
+        blink_rate = random.uniform(starfield["blink_rate"]["min"], starfield["blink_rate"]["max"])
+        color = random.choice(starfield["star_colors"])
+        star_entity = create_square(ecs_world, 
+                                    size=pygame.Vector2(starfield["star_size"]["w"], random.randint(starfield["star_size"]["h_min"], starfield["star_size"]["h_max"])),
+                                    pos=pygame.Vector2(random.randint(0, screen.get_width()), random.randint(0, screen.get_height())), 
+                                    vel=pygame.Vector2(0, vel), 
+                                    col=pygame.Color(color["r"], color["g"], color["b"]))
+        ecs_world.add_component(star_entity, CBlink(blink_rate))
+        ecs_world.add_component(star_entity, CTagStar())
diff --git a/src/ecs/components/c_surface.py b/src/ecs/components/c_surface.py
index afaa84d..8187042 100755
--- a/src/ecs/components/c_surface.py
+++ b/src/ecs/components/c_surface.py
@@ -30,3 +30,8 @@ class CSurface:
         if self.angle >= 360:
             self.angle -= 360
         self.surf = pygame.transform.rotate(self.surf, angle_increment)
+
+    def toggle_alpha(self):
+        current_alpha = self.surf.get_alpha()
+        new_alpha = 0 if current_alpha == 255 else 255
+        self.surf.set_alpha(new_alpha)
\ No newline at end of file
diff --git a/src/ecs/systems/s_enemy_state.py b/src/ecs/systems/s_enemy_state.py
index 8d0fbd0..980e041 100644
--- a/src/ecs/systems/s_enemy_state.py
+++ b/src/ecs/systems/s_enemy_state.py
@@ -38,16 +38,15 @@ def system_enemy_state(world: esper.World, player_entity: pygame.Vector2, enemy_
 
 
 def _do_idle_foward_state(c_v: CVelocity, c_t:CTransform, c_pst: CEnemyState):
-    c_v.vel.x = 30
+    c_v.vel.x = 15
     if c_t.pos.x - c_t.initial_pos.x > 20:
         c_pst.state = EnemyState.IDLE_BACKWARD
 
 def _do_idle_backward_state(c_v: CVelocity, c_t:CTransform, c_pst: CEnemyState):
-    c_v.vel.x = -30
+    c_v.vel.x = -15
     if c_t.pos.x - c_t.initial_pos.x < -20:
         c_pst.state = EnemyState.IDLE_FOWARD
 
-
 def _do_chase_state(c_s: CSurface, c_t: CTransform, c_pst: CEnemyState, pl_t: CTransform, velocity: int, delta_time: float):
     if pl_t.pos.y - c_t.pos.y < 5:
         c_pst.state = EnemyState.RETURN 
diff --git a/src/ecs/systems/s_player_input.py b/src/ecs/systems/s_player_input.py
deleted file mode 100644
index b042eab..0000000
--- a/src/ecs/systems/s_player_input.py
+++ /dev/null
@@ -1,24 +0,0 @@
-import esper
-import pygame
-
-from typing import Callable
-from src.ecs.components.c_input_command import CInputCommand
-from src.ecs.components.c_input_command import CommandPhase
-
-def system_player_input(world: esper.World, event: pygame.event.Event, do_action: Callable[[CInputCommand], None]):
-    components = world.get_component(CInputCommand)
-    c_input:CInputCommand
-    for _, c_input in components:
-        if event.type == pygame.KEYDOWN and c_input.key == event.key:
-            c_input.phase = CommandPhase.START
-            do_action(c_input)
-        if event.type == pygame.KEYUP and c_input.key == event.key:
-            c_input.phase = CommandPhase.END
-            do_action(c_input)
-        if event.type == pygame.MOUSEBUTTONDOWN and c_input.key == event.button:
-            c_input.phase = CommandPhase.START
-            c_input.mouse_pos = pygame.mouse.get_pos()
-            do_action(c_input)
-        if event.type == pygame.MOUSEBUTTONUP and c_input.key == event.button:
-            c_input.phase = CommandPhase.END
-            do_action(c_input)
diff --git a/src/engine/game_engine.py b/src/engine/game_engine.py
index 791f7e0..b163aec 100755
--- a/src/engine/game_engine.py
+++ b/src/engine/game_engine.py
@@ -1,35 +1,13 @@
 import asyncio
 import pygame
-import esper
 
-from src.create.prefab_creator import create_player_square, create_input_player, create_player_bullet_square, create_player_ammunition_square, create_enemy_spawner, draw_text, create_sprite
+from src.engine.scenes.scene import Scene
+from src.game.menu_scene import MenuScene
+from src.game.play_scene import PlayScene
 
-from src.ecs.components.c_input_command import CInputCommand, CommandPhase
-from src.ecs.components.c_velocity import CVelocity
-from src.ecs.components.c_transform import CTransform
-from src.ecs.components.c_surface import CSurface
+from src.ecs.components.c_input_command import CInputCommand
 
-from src.ecs.components.tags.c_tag_player_bullet import CTagPlayerBullet
-
-from src.ecs.systems.s_movement import system_movement
-from src.ecs.systems.s_rendering import system_rendering
-from src.ecs.systems.s_player_bounds import system_player_bounds
-from src.ecs.systems.s_player_input import system_player_input
-from src.ecs.systems.s_bullet_bounds import system_bullet_bounds
-from src.ecs.systems.s_ammunition_recharge import system_ammunition_recharge
-from src.ecs.systems.s_ammunition_player import system_ammunition_player
-from src.ecs.systems.s_enemy_spawner import system_enemy_spawner
-from src.ecs.systems.s_animation import system_animation
-from src.ecs.systems.s_enemy_state import system_enemy_state
-from src.ecs.systems.s_collision_bullet_enemy import system_collision_bullet_enemy
-from src.ecs.systems.s_collision_bullet_player import system_collision_bullet_player
-from src.ecs.systems.s_collision_player_enemy import system_collision_player_enemy
-from src.ecs.systems.s_explosion_kill import system_explosion_kill
-from src.ecs.systems.s_enemy_bounds import system_enemy_bounds
-from src.ecs.systems.s_enemy_bullet import system_enemy_bullet
-from src.engine.service_locator import ServiceLocator
-
-from src.utils.load_config import load_window, load_level_01, load_enemies, load_player, load_bullet, load_explosion, load_interface
+from src.utils.load_config import load_window, load_level_01, load_level_02
 
 class GameEngine:
     def __init__(self) -> None:
@@ -38,54 +16,41 @@ class GameEngine:
 
     def load_config(self):
         self.window = load_window()
-        self.level = load_level_01()
-        self.enemies = load_enemies()
-        self.player = load_player()
-        self.bullet = load_bullet()
-        self.explosion = load_explosion()
-        self.interface = load_interface()
+        self.level_01 = load_level_01()
+        self.level_02 = load_level_02()
 
     def setup_game(self):
         pygame.init()
-        window_size = self.window['size']
-        self.screen = pygame.display.set_mode((window_size['w'], window_size['h']), 0)
         pygame.display.set_caption(self.window['title'])
-        self.max_bullets = self.level['player_spawn']['max_bullets']
+        self.screen = pygame.display.set_mode((self.window['size']['w'], self.window['size']['h']), 0)
         self.clock = pygame.time.Clock()
-        self.is_running = False
-        self.is_paused = False
         self.delta_time = 0
-        self.ecs_world = esper.World()
-
-    async def run(self) -> None:
-        self._create()
+        self.is_running = False
+        self._scenes:dict[str, Scene] = {}
+        self._scenes["MENU_SCENE"] = MenuScene(self)
+        self._scenes["LEVEL_01"] = PlayScene(self.level_01, self)
+        self._scenes["LEVEL_02"] = PlayScene(self.level_02, self)
+        self._current_scene:Scene = None
+        self._scene_name_to_switch:str = None
+
+    async def run(self, start_scene_name:str) -> None:
         self.is_running = True
+        self._current_scene = self._scenes[start_scene_name]
+        self._create()
         while self.is_running:
             self._calculate_time()
             self._process_events()
             self._update()
             self._draw()
+            self._handle_switch_scene()
             await asyncio.sleep(0)
-        self._clean()
+        self._do_clean()
 
-    def _create(self):
-        draw_text(self.ecs_world, self.interface["1up"]["value"], self.interface["1up"]["font"], self.interface["1up"]["font_size"], self.interface["1up"]["color"], self.interface["1up"]["position"])
-        draw_text(self.ecs_world, self.interface["high_score"]["value"], self.interface["high_score"]["font"], self.interface["high_score"]["font_size"], self.interface["high_score"]["color"], self.interface["high_score"]["position"])
-        draw_text(self.ecs_world, self.interface["score_value"]["value"], self.interface["score_value"]["font"], self.interface["score_value"]["font_size"], self.interface["score_value"]["color"], self.interface["score_value"]["position"])
-        draw_text(self.ecs_world, self.interface["high_score_value"]["value"], self.interface["high_score_value"]["font"], self.interface["high_score_value"]["font_size"], self.interface["high_score_value"]["color"], self.interface["high_score_value"]["position"])
-        draw_text(self.ecs_world, self.interface["level_value"]["value"], self.interface["level_value"]["font"], self.interface["level_value"]["font_size"], self.interface["level_value"]["color"], self.interface["level_value"]["position"])
-        create_sprite(self.ecs_world, pygame.Vector2(self.interface["level_img"]["position"]["x"], self.interface["level_img"]["position"]["y"]), pygame.Vector2(0, 0), ServiceLocator.images_service.get(self.interface["level_img"]["image"]))
-        create_sprite(self.ecs_world, pygame.Vector2(self.interface["life_img"]["position"]["x"], self.interface["life_img"]["position"]["y"]), pygame.Vector2(0, 0), ServiceLocator.images_service.get(self.interface["life_img"]["image"]))
-        create_sprite(self.ecs_world, pygame.Vector2(self.interface["life_img"]["position"]["x"]+10, self.interface["life_img"]["position"]["y"]), pygame.Vector2(0, 0), ServiceLocator.images_service.get(self.interface["life_img"]["image"]))
-        create_sprite(self.ecs_world, pygame.Vector2(self.interface["life_img"]["position"]["x"]+20, self.interface["life_img"]["position"]["y"]), pygame.Vector2(0, 0), ServiceLocator.images_service.get(self.interface["life_img"]["image"]))
+    def switch_scene(self, new_scene_name:str):
+        self._scene_name_to_switch = new_scene_name
 
-        create_input_player(self.ecs_world)
-        self._player_entity = create_player_square(self.ecs_world, self.player, self.level['player_spawn'])
-        self._player_c_v = self.ecs_world.component_for_entity(self._player_entity, CVelocity)
-        self._player_c_t = self.ecs_world.component_for_entity(self._player_entity, CTransform)
-        self._player_c_s = self.ecs_world.component_for_entity(self._player_entity, CSurface)
-        create_player_ammunition_square(self.ecs_world, self.bullet["player"], self._player_c_t.pos, self._player_c_s.area.size)
-        create_enemy_spawner(ecs_world=self.ecs_world, enemy_spawn_events=self.level['enemy_spawn_events'])
+    def _create(self):
+        self._current_scene.do_create()
 
     def _calculate_time(self):
         self.clock.tick(self.window['framerate'])
@@ -93,51 +58,30 @@ class GameEngine:
     
     def _process_events(self):
         for event in pygame.event.get():
-            system_player_input(self.ecs_world, event, self._do_action)
+            self._current_scene.do_process_events(event)
             if event.type == pygame.QUIT:
                 self.is_running = False
 
-    def _do_action(self, c_input: CInputCommand):
-        if not self.is_paused:
-            if c_input.name == "PLAYER_LEFT":
-                if c_input.phase == CommandPhase.START:
-                    self._player_c_v.vel.x -= self.player["input_velocity"]
-                elif c_input.phase == CommandPhase.END:
-                    self._player_c_v.vel.x += self.player["input_velocity"]
-            if c_input.name == "PLAYER_RIGHT":
-                if c_input.phase == CommandPhase.START:
-                    self._player_c_v.vel.x += self.player["input_velocity"]
-                elif c_input.phase == CommandPhase.END:
-                    self._player_c_v.vel.x -= self.player["input_velocity"]
-            if c_input.name == "PLAYER_FIRE":
-                if c_input.phase == CommandPhase.START:
-                    components = self.ecs_world.get_components(CTagPlayerBullet)
-                    if len(components) < self.level['player_spawn']['max_bullets']:
-                        create_player_bullet_square(self.ecs_world, self.bullet["player"], self._player_c_t.pos, self._player_c_s.area.size)
-
     def _update(self):
-        system_movement(self.ecs_world, self.delta_time)
-        system_player_bounds(self.ecs_world, self.screen)
-        system_bullet_bounds(self.ecs_world, self.screen)
-        system_ammunition_recharge(self.ecs_world)
-        system_ammunition_player(self.ecs_world)
-        system_enemy_spawner(self.ecs_world, self.delta_time, self.enemies)
-        system_enemy_state(self.ecs_world, self._player_entity, self.enemies, self.delta_time, self.screen)
-        system_collision_bullet_enemy(self.ecs_world, self.explosion['enemy'])
-        system_collision_bullet_player(self.ecs_world, self.level['player_spawn'], self.explosion['player'])
-        system_collision_player_enemy(self.ecs_world, self._player_entity, self.level['player_spawn'], self.explosion['player'])
-        system_explosion_kill(self.ecs_world)
-        system_enemy_bounds(self.ecs_world, self.screen)
-        system_enemy_bullet(self.ecs_world, self.bullet["enemy"], self.delta_time)
-        system_animation(self.ecs_world, self.delta_time)
-        self.ecs_world._clear_dead_entities()
+        self._current_scene.simulate(self.delta_time)
 
     def _draw(self):
         bg_color = self.window['bg_color']
         self.screen.fill((bg_color['r'], bg_color['g'], bg_color['b']))
-        system_rendering(self.ecs_world, self.screen)
+        self._current_scene.do_draw(self.screen)
         pygame.display.flip()
 
-    def _clean(self):
-        self.ecs_world.clear_database()
+    def _handle_switch_scene(self):
+        if self._scene_name_to_switch is not None:
+            self._current_scene.clean()
+            self._current_scene = self._scenes[self._scene_name_to_switch]
+            self._current_scene.do_create()
+            self._scene_name_to_switch = None
+
+    def _do_action(self, action:CInputCommand):        
+        self._current_scene.do_action(action)
+
+    def _do_clean(self):
+        if self._current_scene is not None:
+            self._current_scene.clean()
         pygame.quit()
diff --git a/src/utils/load_config.py b/src/utils/load_config.py
index e810684..8176177 100644
--- a/src/utils/load_config.py
+++ b/src/utils/load_config.py
@@ -12,6 +12,9 @@ def load_window():
 def load_level_01():
     return load_json_file('level_01.json')
 
+def load_level_02():
+    return load_json_file('level_02.json')
+
 def load_enemies():
     return load_json_file('enemies.json')
 
@@ -26,3 +29,6 @@ def load_explosion():
 
 def load_interface():
     return load_json_file('interface.json')
+
+def load_starfield():
+    return load_json_file('starfield.json')
